{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7d4857d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:22.652980Z",
     "iopub.status.busy": "2025-02-02T14:16:22.652663Z",
     "iopub.status.idle": "2025-02-02T14:16:23.633127Z",
     "shell.execute_reply": "2025-02-02T14:16:23.631723Z"
    },
    "papermill": {
     "duration": 0.992919,
     "end_time": "2025-02-02T14:16:23.634868",
     "exception": false,
     "start_time": "2025-02-02T14:16:22.641949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/customer-survey-dataset/SCFP2022.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80f5bcf4",
   "metadata": {
    "papermill": {
     "duration": 0.008354,
     "end_time": "2025-02-02T14:16:23.652125",
     "exception": false,
     "start_time": "2025-02-02T14:16:23.643771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This research focuses on Small Business Owners in the United States drawn from the public dataset of 2022 United states Customer Survey"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbab6078",
   "metadata": {
    "papermill": {
     "duration": 0.007818,
     "end_time": "2025-02-02T14:16:23.667885",
     "exception": false,
     "start_time": "2025-02-02T14:16:23.660067",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I am to focus on business owners in the United States. starting by examining some demographic characteristics of the group, such as age, income category, and debt vs home value. I'll select high-variance features, and create a clustering model to divide small business owners into subgroups. Finally, creating visualizations to highlight the differences between these subgroups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "51def980",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:23.685334Z",
     "iopub.status.busy": "2025-02-02T14:16:23.684812Z",
     "iopub.status.idle": "2025-02-02T14:16:26.753892Z",
     "shell.execute_reply": "2025-02-02T14:16:26.752932Z"
    },
    "papermill": {
     "duration": 3.079941,
     "end_time": "2025-02-02T14:16:26.755780",
     "exception": false,
     "start_time": "2025-02-02T14:16:23.675839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import libraries here\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA\n",
    "from scipy.stats.mstats import trimmed_var\n",
    "import plotly.express as px\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import silhouette_score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "215b81a5",
   "metadata": {
    "papermill": {
     "duration": 0.007811,
     "end_time": "2025-02-02T14:16:26.772511",
     "exception": false,
     "start_time": "2025-02-02T14:16:26.764700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Prepare Data\n",
    "\n",
    "Import\n",
    "\n",
    "Reading the file SCFP2022.csv into dataframe df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "41293aca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:26.790255Z",
     "iopub.status.busy": "2025-02-02T14:16:26.789683Z",
     "iopub.status.idle": "2025-02-02T14:16:27.951008Z",
     "shell.execute_reply": "2025-02-02T14:16:27.949929Z"
    },
    "papermill": {
     "duration": 1.171786,
     "end_time": "2025-02-02T14:16:27.952612",
     "exception": false,
     "start_time": "2025-02-02T14:16:26.780826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df shape: (22975, 357)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YY1</th>\n",
       "      <th>Y1</th>\n",
       "      <th>WGT</th>\n",
       "      <th>HHSEX</th>\n",
       "      <th>AGE</th>\n",
       "      <th>AGECL</th>\n",
       "      <th>EDUC</th>\n",
       "      <th>EDCL</th>\n",
       "      <th>MARRIED</th>\n",
       "      <th>KIDS</th>\n",
       "      <th>...</th>\n",
       "      <th>NWCAT</th>\n",
       "      <th>INCCAT</th>\n",
       "      <th>ASSETCAT</th>\n",
       "      <th>NINCCAT</th>\n",
       "      <th>NINC2CAT</th>\n",
       "      <th>NWPCTLECAT</th>\n",
       "      <th>INCPCTLECAT</th>\n",
       "      <th>NINCPCTLECAT</th>\n",
       "      <th>INCQRTCAT</th>\n",
       "      <th>NINCQRTCAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>3027.956120</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>3054.900065</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>3163.637766</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>3166.228463</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>3235.624715</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 357 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   YY1  Y1          WGT  HHSEX  AGE  AGECL  EDUC  EDCL  MARRIED  KIDS  ...  \\\n",
       "0    1  11  3027.956120      2   70      5     9     3        2     2  ...   \n",
       "1    1  12  3054.900065      2   70      5     9     3        2     2  ...   \n",
       "2    1  13  3163.637766      2   70      5     9     3        2     2  ...   \n",
       "3    1  14  3166.228463      2   70      5     9     3        2     2  ...   \n",
       "4    1  15  3235.624715      2   70      5     9     3        2     2  ...   \n",
       "\n",
       "   NWCAT  INCCAT  ASSETCAT  NINCCAT  NINC2CAT  NWPCTLECAT  INCPCTLECAT  \\\n",
       "0      4       2         4        2         1           8            3   \n",
       "1      4       2         5        2         1           8            3   \n",
       "2      4       2         4        2         1           8            3   \n",
       "3      3       2         4        1         1           6            3   \n",
       "4      3       2         4        2         1           8            3   \n",
       "\n",
       "   NINCPCTLECAT  INCQRTCAT  NINCQRTCAT  \n",
       "0             3          2           1  \n",
       "1             3          2           1  \n",
       "2             3          1           1  \n",
       "3             2          1           1  \n",
       "4             3          1           1  \n",
       "\n",
       "[5 rows x 357 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/customer-survey-dataset/SCFP2022.csv\")\n",
    "print(\"df shape:\", df.shape)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddecdccb",
   "metadata": {
    "papermill": {
     "duration": 0.008411,
     "end_time": "2025-02-02T14:16:27.970176",
     "exception": false,
     "start_time": "2025-02-02T14:16:27.961765",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Explore\n",
    "\n",
    "This dataset contains a wide description of financial terminologies characteristic to the customer survey respondents.\n",
    "\n",
    "We can see above that the dataset contains 22975 respondents(rows) and 357 features(Columns).\n",
    "\n",
    "As mentioned at the start, I am focusing on business owners. But what percentage of the respondents in df are business owners?\n",
    "\n",
    "Calculate the proportion of respondents in df that are business owners, and assign the result to the variable prop_biz_owners. The \"HBUS\" column represents the Positive or negative response to business ownership as represented in the data documentation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "64228e3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:27.988128Z",
     "iopub.status.busy": "2025-02-02T14:16:27.987767Z",
     "iopub.status.idle": "2025-02-02T14:16:27.994085Z",
     "shell.execute_reply": "2025-02-02T14:16:27.993267Z"
    },
    "papermill": {
     "duration": 0.017052,
     "end_time": "2025-02-02T14:16:27.995631",
     "exception": false,
     "start_time": "2025-02-02T14:16:27.978579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.info of 0        0\n",
       "1        0\n",
       "2        0\n",
       "3        0\n",
       "4        0\n",
       "        ..\n",
       "22970    0\n",
       "22971    0\n",
       "22972    0\n",
       "22973    0\n",
       "22974    0\n",
       "Name: HBUS, Length: 22975, dtype: int64>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"HBUS\"].info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "537ec50c",
   "metadata": {
    "papermill": {
     "duration": 0.008288,
     "end_time": "2025-02-02T14:16:28.012471",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.004183",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The num_biz_owners shows that 6386 documentation of respondents identified as Business owners out of the total respondent count of 22975"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fda534f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.030586Z",
     "iopub.status.busy": "2025-02-02T14:16:28.030281Z",
     "iopub.status.idle": "2025-02-02T14:16:28.045741Z",
     "shell.execute_reply": "2025-02-02T14:16:28.044916Z"
    },
    "papermill": {
     "duration": 0.026245,
     "end_time": "2025-02-02T14:16:28.047192",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.020947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6386"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_biz_owners = df['HBUS'].value_counts().get(1, 0)\n",
    "num_biz_owners"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2793cfd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.065531Z",
     "iopub.status.busy": "2025-02-02T14:16:28.065260Z",
     "iopub.status.idle": "2025-02-02T14:16:28.070717Z",
     "shell.execute_reply": "2025-02-02T14:16:28.069751Z"
    },
    "papermill": {
     "duration": 0.016561,
     "end_time": "2025-02-02T14:16:28.072329",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.055768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22975"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the total number of respondents\n",
    "total_respondents = df[\"HBUS\"].count()\n",
    "total_respondents"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08adee7c",
   "metadata": {
    "papermill": {
     "duration": 0.008316,
     "end_time": "2025-02-02T14:16:28.089310",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.080994",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The prop_biz_owners accounts for 27.8% of the total number of customers involved in the survey."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d8332265",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.107654Z",
     "iopub.status.busy": "2025-02-02T14:16:28.107350Z",
     "iopub.status.idle": "2025-02-02T14:16:28.112227Z",
     "shell.execute_reply": "2025-02-02T14:16:28.111141Z"
    },
    "papermill": {
     "duration": 0.016,
     "end_time": "2025-02-02T14:16:28.113813",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.097813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proportion of business owners in df: 0.2779542981501632\n"
     ]
    }
   ],
   "source": [
    "prop_biz_owners = num_biz_owners / total_respondents\n",
    "print(\"proportion of business owners in df:\", prop_biz_owners)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9760525f",
   "metadata": {
    "papermill": {
     "duration": 0.008425,
     "end_time": "2025-02-02T14:16:28.131316",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.122891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "lets create a DataFrame df_inccat that shows the normalized frequency for income categories for business owners and non-business owners."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "654cf711",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.149874Z",
     "iopub.status.busy": "2025-02-02T14:16:28.149569Z",
     "iopub.status.idle": "2025-02-02T14:16:28.183287Z",
     "shell.execute_reply": "2025-02-02T14:16:28.181980Z"
    },
    "papermill": {
     "duration": 0.044877,
     "end_time": "2025-02-02T14:16:28.184926",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.140049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    HBUS   INCCAT  frequency\n",
      "0      0     0-20   0.217373\n",
      "1      0  21-39.9   0.202664\n",
      "2      0  40-59.9   0.190186\n",
      "3      0  60-79.9   0.173247\n",
      "4      0  80-89.9   0.097535\n",
      "5      0   90-100   0.118995\n",
      "6      1     0-20   0.059818\n",
      "7      1  21-39.9   0.050736\n",
      "8      1  40-59.9   0.062167\n",
      "9      1  60-79.9   0.103977\n",
      "10     1  80-89.9   0.101159\n",
      "11     1   90-100   0.622142\n"
     ]
    }
   ],
   "source": [
    "inccat_dict = {\n",
    "    1: \"0-20\",\n",
    "    2: \"21-39.9\",\n",
    "    3: \"40-59.9\",\n",
    "    4: \"60-79.9\",\n",
    "    5: \"80-89.9\",\n",
    "    6: \"90-100\",\n",
    "}\n",
    "\n",
    "# Step 1: Map the numeric INCCAT values to their string representations\n",
    "df['INCCAT_STR'] = df['INCCAT'].map(inccat_dict)\n",
    "\n",
    "# Step 2: Create a cross-tabulation of HBUS and INCCAT_STR\n",
    "cross_tab = pd.crosstab(df['HBUS'], df['INCCAT_STR'])\n",
    "\n",
    "# Step 3: Normalize the cross-tabulation\n",
    "normalized_cross_tab = cross_tab.div(cross_tab.sum(axis=1), axis=0)\n",
    "\n",
    "# Step 4: Reset the index and melt the DataFrame\n",
    "df_inccat = normalized_cross_tab.reset_index().melt(id_vars=['HBUS'], var_name='INCCAT', value_name='frequency')\n",
    "\n",
    "# Step 5: Sort the DataFrame\n",
    "df_inccat = df_inccat.sort_values(['HBUS', 'INCCAT']).reset_index(drop=True)\n",
    "\n",
    "# Display the result\n",
    "print(df_inccat)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19cf03b0",
   "metadata": {
    "papermill": {
     "duration": 0.008586,
     "end_time": "2025-02-02T14:16:28.202667",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.194081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using seaborn, let's create a side-by-side bar chart of df_inccat. Set hue to \"HBUS\", and make sure that the income categories are in the correct order along the x-axis. Label to the x-axis \"Income Category\", the y-axis \"Frequency (%)\", and use the title \"Income Distribution: Business Owners vs. Non-Business Owners\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f1979ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.221488Z",
     "iopub.status.busy": "2025-02-02T14:16:28.221130Z",
     "iopub.status.idle": "2025-02-02T14:16:28.598375Z",
     "shell.execute_reply": "2025-02-02T14:16:28.597351Z"
    },
    "papermill": {
     "duration": 0.388491,
     "end_time": "2025-02-02T14:16:28.600067",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.211576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "income_order = df_inccat[\"INCCAT\"].unique()\n",
    "sns.barplot(x=\"INCCAT\", y=\"frequency\", hue=\"HBUS\", data=df_inccat, order=income_order)\n",
    "plt.xlabel(\"Income Category\")\n",
    "plt.ylabel(\"Frequency (%)\")\n",
    "plt.title(\"Income Distribution: Business Owners vs. Non-Business Owners\");\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b61e54d",
   "metadata": {
    "papermill": {
     "duration": 0.010536,
     "end_time": "2025-02-02T14:16:28.620484",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.609948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "lets look at the relationship between home value and household debt in the context of the business owners, Are there notable differences between business owners and non-business owners?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "80a625de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:28.642210Z",
     "iopub.status.busy": "2025-02-02T14:16:28.641823Z",
     "iopub.status.idle": "2025-02-02T14:16:29.619830Z",
     "shell.execute_reply": "2025-02-02T14:16:29.618839Z"
    },
    "papermill": {
     "duration": 0.990585,
     "end_time": "2025-02-02T14:16:29.621706",
     "exception": false,
     "start_time": "2025-02-02T14:16:28.631121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the scatter plot\n",
    "sns.scatterplot(x='DEBT', y='HOUSES', hue='HBUS', data=df)\n",
    "\n",
    "# Customize the plot\n",
    "plt.xlabel(\"Household Debt\")\n",
    "plt.ylabel(\"Home Value\")\n",
    "plt.title(\"Home Value vs. Household Debt\")\n",
    "\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "\n",
    "\n",
    "# Show the plot (optional, remove this line if you're running this in a notebook that automatically displays plots)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a333b8c2",
   "metadata": {
    "papermill": {
     "duration": 0.010167,
     "end_time": "2025-02-02T14:16:29.644058",
     "exception": false,
     "start_time": "2025-02-02T14:16:29.633891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "lets create a new DataFrame df_small_biz that contains only business owners whose income is below $1000,000.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "09c1982f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:29.666056Z",
     "iopub.status.busy": "2025-02-02T14:16:29.665734Z",
     "iopub.status.idle": "2025-02-02T14:16:29.691442Z",
     "shell.execute_reply": "2025-02-02T14:16:29.690031Z"
    },
    "papermill": {
     "duration": 0.038637,
     "end_time": "2025-02-02T14:16:29.693073",
     "exception": false,
     "start_time": "2025-02-02T14:16:29.654436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_small_biz shape: (4016, 357)\n",
      "   Y1         WGT  HHSEX  AGE  AGECL  EDUC  EDCL  MARRIED  KIDS  LF  ...  \\\n",
      "0  21  236.634754      1   46      3    12     4        2     0   1  ...   \n",
      "1  22  245.848398      1   46      3    12     4        2     0   1  ...   \n",
      "2  23  253.103477      1   46      3    12     4        2     0   1  ...   \n",
      "3  24  252.908118      1   46      3    12     4        2     0   1  ...   \n",
      "4  25  253.811312      1   46      3    12     4        2     0   1  ...   \n",
      "\n",
      "   INCCAT  ASSETCAT  NINCCAT  NINC2CAT  NWPCTLECAT  INCPCTLECAT  NINCPCTLECAT  \\\n",
      "0       5         5        5         2           8            9             9   \n",
      "1       5         5        5         2           8            9             9   \n",
      "2       5         5        5         2           8            9             9   \n",
      "3       5         5        5         2           8            9             9   \n",
      "4       5         5        5         2           8            9             9   \n",
      "\n",
      "   INCQRTCAT  NINCQRTCAT  INCCAT_STR  \n",
      "0          4           4     80-89.9  \n",
      "1          4           4     80-89.9  \n",
      "2          4           4     80-89.9  \n",
      "3          4           4     80-89.9  \n",
      "4          4           4     80-89.9  \n",
      "\n",
      "[5 rows x 357 columns]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Create the mask\n",
    "mask = (df[\"HBUS\"] == 1) & (df['INCOME'] < 1_000_000)\n",
    "\n",
    "# Apply the mask, drop the first column, and reset the index\n",
    "df_small_biz = df[mask].iloc[:, 1:].reset_index(drop=True)\n",
    "\n",
    "print(\"df_small_biz shape:\", df_small_biz.shape)\n",
    "print(df_small_biz.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "185122b5",
   "metadata": {
    "papermill": {
     "duration": 0.010264,
     "end_time": "2025-02-02T14:16:29.714058",
     "exception": false,
     "start_time": "2025-02-02T14:16:29.703794",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "lets create a histogram from the \"AGE\" column in df_small_biz with 10 bins. labeling the x-axis \"Age\", the y-axis \"Frequency (count)\", and using the title \"Small Business Owners: Age Distribution\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "56b35974",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:29.735950Z",
     "iopub.status.busy": "2025-02-02T14:16:29.735605Z",
     "iopub.status.idle": "2025-02-02T14:16:30.106374Z",
     "shell.execute_reply": "2025-02-02T14:16:30.105352Z"
    },
    "papermill": {
     "duration": 0.383641,
     "end_time": "2025-02-02T14:16:30.108125",
     "exception": false,
     "start_time": "2025-02-02T14:16:29.724484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the histogram using pandas plot\n",
    "df_small_biz[\"AGE\"].plot(kind=\"hist\")\n",
    "\n",
    "# Set labels and title\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Frequency (count)')\n",
    "plt.title('Small Business Owners: Age Distribution')\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10e9eac3",
   "metadata": {
    "papermill": {
     "duration": 0.011136,
     "end_time": "2025-02-02T14:16:30.132563",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.121427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Calculating the variance for all the features in df_small_biz, and create a Series top_ten_var with the 10 features with the largest variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "19bd4e09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:30.156529Z",
     "iopub.status.busy": "2025-02-02T14:16:30.156189Z",
     "iopub.status.idle": "2025-02-02T14:16:30.176952Z",
     "shell.execute_reply": "2025-02-02T14:16:30.176039Z"
    },
    "papermill": {
     "duration": 0.034895,
     "end_time": "2025-02-02T14:16:30.178812",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.143917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate variance, get 10 largest features\n",
    "# Get numeric columns\n",
    "numeric_columns = df_small_biz.select_dtypes(include=[np.number]).columns\n",
    "\n",
    "# Calculate variance for numeric columns\n",
    "variances = df_small_biz[numeric_columns].var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "04440727",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:30.202711Z",
     "iopub.status.busy": "2025-02-02T14:16:30.202346Z",
     "iopub.status.idle": "2025-02-02T14:16:30.210007Z",
     "shell.execute_reply": "2025-02-02T14:16:30.209199Z"
    },
    "papermill": {
     "duration": 0.021384,
     "end_time": "2025-02-02T14:16:30.211696",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.190312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ASSET        4.140843e+15\n",
       "NETWORTH     4.055001e+15\n",
       "NFIN         3.107256e+15\n",
       "NHNFIN       3.065662e+15\n",
       "BUS          2.133689e+15\n",
       "ACTBUS       1.425778e+15\n",
       "KGTOTAL      1.127542e+15\n",
       "KGBUS        9.217774e+14\n",
       "NONACTBUS    2.454553e+14\n",
       "FIN          1.450543e+14\n",
       "dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort variances in descending order\n",
    "sorted_variances = variances.sort_values(ascending=False)\n",
    "\n",
    "# Select the top 10 features with largest variance\n",
    "top_ten_var = sorted_variances.head(10)\n",
    "top_ten_var"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2953559",
   "metadata": {
    "papermill": {
     "duration": 0.010981,
     "end_time": "2025-02-02T14:16:30.233847",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.222866",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It is needed to remove some outliers to avoid problems in our calculations, so let's trim them out.\n",
    "Calculate the trimmed variance for the features in df_small_biz. the calculations should not include the top and bottom 10% of observations. Then i\"ll create a Series top_ten_trim_var with the 10 features with the largest variance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "398fb996",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:30.257612Z",
     "iopub.status.busy": "2025-02-02T14:16:30.257287Z",
     "iopub.status.idle": "2025-02-02T14:16:30.436031Z",
     "shell.execute_reply": "2025-02-02T14:16:30.435061Z"
    },
    "papermill": {
     "duration": 0.192506,
     "end_time": "2025-02-02T14:16:30.437580",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.245074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EQUITY      6.256726e+11\n",
       "KGBUS       9.610844e+11\n",
       "ACTBUS      1.633527e+12\n",
       "FIN         1.855992e+12\n",
       "BUS         2.306196e+12\n",
       "KGTOTAL     2.662355e+12\n",
       "NHNFIN      4.092207e+12\n",
       "NFIN        6.213366e+12\n",
       "NETWORTH    1.544275e+13\n",
       "ASSET       1.645057e+13\n",
       "dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def trimmed_var(col, lower=0.1, upper=0.1):\n",
    "    if not np.issubdtype(col.dtype, np.number):\n",
    "        return np.nan\n",
    "    trimmed = col.sort_values()[int(lower*len(col)):int((1-upper)*len(col))]\n",
    "    return np.var(trimmed)\n",
    "\n",
    "numeric_df = df_small_biz.select_dtypes(include=\"number\")\n",
    "trimmed_variances = numeric_df.apply(lambda col: trimmed_var(col, lower=0.1, upper=0.1))\n",
    "top_ten_trim_var = trimmed_variances.sort_values().tail(10)\n",
    "top_ten_trim_var\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07ccf2de",
   "metadata": {
    "papermill": {
     "duration": 0.010995,
     "end_time": "2025-02-02T14:16:30.460522",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.449527",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using plotly express to create a horizontal bar chart of top_ten_trim_var. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ab43d8b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:30.484128Z",
     "iopub.status.busy": "2025-02-02T14:16:30.483772Z",
     "iopub.status.idle": "2025-02-02T14:16:31.951909Z",
     "shell.execute_reply": "2025-02-02T14:16:31.950994Z"
    },
    "papermill": {
     "duration": 1.481905,
     "end_time": "2025-02-02T14:16:31.953582",
     "exception": false,
     "start_time": "2025-02-02T14:16:30.471677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"4f45dbc4-979c-4fb3-b76f-1a76188288b1\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4f45dbc4-979c-4fb3-b76f-1a76188288b1\")) {                    Plotly.newPlot(                        \"4f45dbc4-979c-4fb3-b76f-1a76188288b1\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Trimmed Variance [$]=%{x}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[625672601136.0887,961084351012.047,1633526750611.2578,1855992290833.3677,2306196332959.268,2662354826506.192,4092206548012.9214,6213365549870.748,15442746240394.268,16450573073255.803],\"xaxis\":\"x\",\"y\":[\"EQUITY\",\"KGBUS\",\"ACTBUS\",\"FIN\",\"BUS\",\"KGTOTAL\",\"NHNFIN\",\"NFIN\",\"NETWORTH\",\"ASSET\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Trimmed Variance [$]\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Small Business Owners: High Variance Features\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('4f45dbc4-979c-4fb3-b76f-1a76188288b1');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Create horizontal bar chart of `top_ten_trim_var`\n",
    "fig = px.bar(\n",
    "    x=top_ten_trim_var.values,\n",
    "    y=top_ten_trim_var.index,\n",
    "    orientation='h',\n",
    "    labels={'x': 'Trimmed Variance [$]', 'y': 'Feature'},\n",
    "    title='Small Business Owners: High Variance Features'\n",
    ")\n",
    "\n",
    "# Update layout to ensure correct axis labels\n",
    "fig.update_layout(\n",
    "    xaxis_title='Trimmed Variance [$]',\n",
    "    yaxis_title='Feature'\n",
    ")\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3df539fb",
   "metadata": {
    "papermill": {
     "duration": 0.011357,
     "end_time": "2025-02-02T14:16:31.976874",
     "exception": false,
     "start_time": "2025-02-02T14:16:31.965517",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Based on this graph above, we can see that five features with the highest variance is ASSET, NETWORTH, NFIN, NHNFIN, KGTOTAL.\n",
    "\n",
    "Lets Generate a list high_var_cols with the column names of the five features with the highest trimmed variance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1ec0a424",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:32.001268Z",
     "iopub.status.busy": "2025-02-02T14:16:32.000826Z",
     "iopub.status.idle": "2025-02-02T14:16:32.006548Z",
     "shell.execute_reply": "2025-02-02T14:16:32.005634Z"
    },
    "papermill": {
     "duration": 0.019395,
     "end_time": "2025-02-02T14:16:32.007848",
     "exception": false,
     "start_time": "2025-02-02T14:16:31.988453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['KGTOTAL', 'NHNFIN', 'NFIN', 'NETWORTH', 'ASSET']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_var_cols = top_ten_trim_var.tail().index.tolist()\n",
    "high_var_cols\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd5cabb6",
   "metadata": {
    "papermill": {
     "duration": 0.011293,
     "end_time": "2025-02-02T14:16:32.030685",
     "exception": false,
     "start_time": "2025-02-02T14:16:32.019392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Split\n",
    "\n",
    "Let's turn that list into a feature matrix.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "729f3e96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:32.055282Z",
     "iopub.status.busy": "2025-02-02T14:16:32.054780Z",
     "iopub.status.idle": "2025-02-02T14:16:32.069439Z",
     "shell.execute_reply": "2025-02-02T14:16:32.068591Z"
    },
    "papermill": {
     "duration": 0.028778,
     "end_time": "2025-02-02T14:16:32.070867",
     "exception": false,
     "start_time": "2025-02-02T14:16:32.042089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (4016, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>KGTOTAL</th>\n",
       "      <th>NHNFIN</th>\n",
       "      <th>NFIN</th>\n",
       "      <th>NETWORTH</th>\n",
       "      <th>ASSET</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>164000.0</td>\n",
       "      <td>520000.0</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>721800.0</td>\n",
       "      <td>1240500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>164000.0</td>\n",
       "      <td>520000.0</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>723800.0</td>\n",
       "      <td>1242500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>164000.0</td>\n",
       "      <td>520000.0</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>721400.0</td>\n",
       "      <td>1241100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>164000.0</td>\n",
       "      <td>520000.0</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>724300.0</td>\n",
       "      <td>1244000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>164000.0</td>\n",
       "      <td>519000.0</td>\n",
       "      <td>1099000.0</td>\n",
       "      <td>722600.0</td>\n",
       "      <td>1241300.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    KGTOTAL    NHNFIN       NFIN  NETWORTH      ASSET\n",
       "0  164000.0  520000.0  1100000.0  721800.0  1240500.0\n",
       "1  164000.0  520000.0  1100000.0  723800.0  1242500.0\n",
       "2  164000.0  520000.0  1100000.0  721400.0  1241100.0\n",
       "3  164000.0  520000.0  1100000.0  724300.0  1244000.0\n",
       "4  164000.0  519000.0  1099000.0  722600.0  1241300.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df_small_biz[[\"KGTOTAL\",\"NHNFIN\",\"NFIN\",\"NETWORTH\",\"ASSET\"]]\n",
    "print(\"X shape:\", X.shape)\n",
    "X.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40e363d7",
   "metadata": {
    "papermill": {
     "duration": 0.011682,
     "end_time": "2025-02-02T14:16:32.094523",
     "exception": false,
     "start_time": "2025-02-02T14:16:32.082841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Build Model\n",
    "\n",
    "let's get to work on the model.\n",
    "\n",
    "Iterate\n",
    "\n",
    "I used a for loop to build and train a K-Means model where n_clusters ranges from 2 to 13 (2-12 Inclusive). The model includes a StandardScaler. \n",
    "and each time a model is trained calculates the inertia and adds it to the list inertia_errors, then calculates the silhouette score and adds it to the list silhouette_scores.\n",
    "\n",
    "For reproducibility,  I set the random state for the model to 42.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b081fb2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:32.119356Z",
     "iopub.status.busy": "2025-02-02T14:16:32.118977Z",
     "iopub.status.idle": "2025-02-02T14:16:44.973476Z",
     "shell.execute_reply": "2025-02-02T14:16:44.972323Z"
    },
    "papermill": {
     "duration": 12.868797,
     "end_time": "2025-02-02T14:16:44.975140",
     "exception": false,
     "start_time": "2025-02-02T14:16:32.106343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inertia: [4490.407581818556, 2563.7455757690877, 1413.3875346358648, 1102.9737722077834, 786.0250782849846, 600.0407900550894, 430.5785681242504, 351.43700240345703, 289.2873893311932, 252.12096588426527, 222.7342719526466]\n",
      "\n",
      "Silhouette Scores: [0.9817051469660221, 0.9755315677306771, 0.9270919186696569]\n"
     ]
    }
   ],
   "source": [
    "n_clusters = range(2,13)\n",
    "inertia_errors = []\n",
    "silhouette_scores = []\n",
    "\n",
    "# Add `for` loop to train model and calculate inertia, silhouette score.\n",
    "for k in n_clusters:\n",
    "    model = make_pipeline(StandardScaler(), KMeans(n_clusters=k, random_state=42))\n",
    "    # train model\n",
    "    model.fit(X)\n",
    "    # calculate inertia errors \n",
    "    inertia_errors.append(model.named_steps[\"kmeans\"].inertia_)\n",
    "    # Calculate silhouette score \n",
    "    silhouette_scores.append(\n",
    "        silhouette_score(X, model.named_steps[\"kmeans\"].labels_)\n",
    "    )\n",
    "\n",
    "print(\"Inertia:\", inertia_errors[:11])\n",
    "print()\n",
    "print(\"Silhouette Scores:\", silhouette_scores[:3])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0c8e3f6",
   "metadata": {
    "papermill": {
     "duration": 0.012355,
     "end_time": "2025-02-02T14:16:45.000644",
     "exception": false,
     "start_time": "2025-02-02T14:16:44.988289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "we can start to figure out how many clusters we'll need with a line plot based on Inertia."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "004faff4",
   "metadata": {
    "papermill": {
     "duration": 0.012069,
     "end_time": "2025-02-02T14:16:45.025195",
     "exception": false,
     "start_time": "2025-02-02T14:16:45.013126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's Use plotly express to create a line plot that shows the values of inertia_errors as a function of n_clusters.  label  x-axis \"Number of Clusters\", y-axis \"Inertia\", and title \"K-Means Model: Inertia vs Number of Clusters\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5062d98d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:45.051334Z",
     "iopub.status.busy": "2025-02-02T14:16:45.050943Z",
     "iopub.status.idle": "2025-02-02T14:16:45.121333Z",
     "shell.execute_reply": "2025-02-02T14:16:45.120208Z"
    },
    "papermill": {
     "duration": 0.085365,
     "end_time": "2025-02-02T14:16:45.122952",
     "exception": false,
     "start_time": "2025-02-02T14:16:45.037587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"1f15b2d8-36f2-41ad-9795-601013643ee2\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1f15b2d8-36f2-41ad-9795-601013643ee2\")) {                    Plotly.newPlot(                        \"1f15b2d8-36f2-41ad-9795-601013643ee2\",                        [{\"hovertemplate\":\"Number of Clusters=%{x}\\u003cbr\\u003eInertia=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2,3,4,5,6,7,8,9,10,11,12],\"xaxis\":\"x\",\"y\":[4490.407581818556,2563.7455757690877,1413.3875346358648,1102.9737722077834,786.0250782849846,600.0407900550894,430.5785681242504,351.43700240345703,289.2873893311932,252.12096588426527,222.7342719526466],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of Clusters\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Inertia\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"K-Means Model: Inertia vs Number of Clusters\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('1f15b2d8-36f2-41ad-9795-601013643ee2');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create line plot of `inertia_errors` vs `n_clusters`\n",
    "# Assuming you have already calculated inertia_errors and n_clusters\n",
    "fig = px.line(\n",
    "    x=list(n_clusters),\n",
    "    y=inertia_errors,\n",
    "    labels={'x': 'Number of Clusters', 'y': 'Inertia'},\n",
    "    title='K-Means Model: Inertia vs Number of Clusters'\n",
    ")\n",
    "\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e134e9d0",
   "metadata": {
    "papermill": {
     "duration": 0.012491,
     "end_time": "2025-02-02T14:16:45.148411",
     "exception": false,
     "start_time": "2025-02-02T14:16:45.135920",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "And let's do the same thing with the Silhouette Scores.\n",
    "\n",
    " Use plotly express to create a line plot that shows the values of silhouette_scores as a function of n_clusters. label x-axis \"Number of Clusters\", y-axis \"Silhouette Score\", and title \"K-Means Model: Silhouette Score vs Number of Clusters\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "26614bb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:45.175330Z",
     "iopub.status.busy": "2025-02-02T14:16:45.174894Z",
     "iopub.status.idle": "2025-02-02T14:16:45.220814Z",
     "shell.execute_reply": "2025-02-02T14:16:45.219707Z"
    },
    "papermill": {
     "duration": 0.06152,
     "end_time": "2025-02-02T14:16:45.222526",
     "exception": false,
     "start_time": "2025-02-02T14:16:45.161006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"b0b836e3-85f8-4ee1-8c14-71419afd8f05\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b0b836e3-85f8-4ee1-8c14-71419afd8f05\")) {                    Plotly.newPlot(                        \"b0b836e3-85f8-4ee1-8c14-71419afd8f05\",                        [{\"hovertemplate\":\"Number of Clusters=%{x}\\u003cbr\\u003eSilhouette Score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2,3,4,5,6,7,8,9,10,11,12],\"xaxis\":\"x\",\"y\":[0.9817051469660221,0.9755315677306771,0.9270919186696569,0.9271516175635381,0.9234766167721962,0.8015920925044787,0.7996435731956923,0.7424849396298194,0.7412522801864149,0.7402985166764897,0.7379307188738715],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of Clusters\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Silhouette Score\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"K-Means Model: Silhouette Score vs Number of Clusters\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('b0b836e3-85f8-4ee1-8c14-71419afd8f05');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a line plot of `silhouette_scores` vs `n_clusters`\n",
    "fig = px.line(\n",
    "    x=list(n_clusters),\n",
    "    y=silhouette_scores,\n",
    "    labels={'x': 'Number of Clusters', 'y': 'Silhouette Score'},\n",
    "    title='K-Means Model: Silhouette Score vs Number of Clusters'\n",
    ")\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bc7a058c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:45.250000Z",
     "iopub.status.busy": "2025-02-02T14:16:45.249624Z",
     "iopub.status.idle": "2025-02-02T14:16:46.039105Z",
     "shell.execute_reply": "2025-02-02T14:16:46.035321Z"
    },
    "papermill": {
     "duration": 0.806305,
     "end_time": "2025-02-02T14:16:46.042192",
     "exception": false,
     "start_time": "2025-02-02T14:16:45.235887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
       "                (&#x27;kmeans&#x27;, KMeans(n_clusters=4, random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
       "                (&#x27;kmeans&#x27;, KMeans(n_clusters=4, random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4, random_state=42)</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                ('kmeans', KMeans(n_clusters=4, random_state=42))])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model = make_pipeline(\n",
    "    StandardScaler(),\n",
    "    KMeans(n_clusters=4, random_state=42)\n",
    ")\n",
    "\n",
    "final_model.fit(X)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cacd2f44",
   "metadata": {
    "papermill": {
     "duration": 0.013191,
     "end_time": "2025-02-02T14:16:46.079965",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.066774",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Communicate\n",
    "\n",
    "Creating a DataFrame xgb that contains the mean values of the features in X for the 3 clusters in the final_model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a193e413",
   "metadata": {
    "papermill": {
     "duration": 0.013008,
     "end_time": "2025-02-02T14:16:46.106286",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.093278",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "22437746",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.134242Z",
     "iopub.status.busy": "2025-02-02T14:16:46.133849Z",
     "iopub.status.idle": "2025-02-02T14:16:46.152497Z",
     "shell.execute_reply": "2025-02-02T14:16:46.151369Z"
    },
    "papermill": {
     "duration": 0.034841,
     "end_time": "2025-02-02T14:16:46.154335",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.119494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>KGTOTAL</th>\n",
       "      <th>NHNFIN</th>\n",
       "      <th>NFIN</th>\n",
       "      <th>NETWORTH</th>\n",
       "      <th>ASSET</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.029966e+06</td>\n",
       "      <td>2.729425e+06</td>\n",
       "      <td>3.598093e+06</td>\n",
       "      <td>5.214579e+06</td>\n",
       "      <td>5.544008e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.750926e+08</td>\n",
       "      <td>9.562732e+08</td>\n",
       "      <td>9.604357e+08</td>\n",
       "      <td>1.060061e+09</td>\n",
       "      <td>1.075968e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.626709e+08</td>\n",
       "      <td>4.921425e+08</td>\n",
       "      <td>4.949845e+08</td>\n",
       "      <td>5.860295e+08</td>\n",
       "      <td>5.863084e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.960001e+07</td>\n",
       "      <td>9.293736e+07</td>\n",
       "      <td>9.814562e+07</td>\n",
       "      <td>1.250146e+08</td>\n",
       "      <td>1.274217e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        KGTOTAL        NHNFIN          NFIN      NETWORTH         ASSET\n",
       "0  2.029966e+06  2.729425e+06  3.598093e+06  5.214579e+06  5.544008e+06\n",
       "1  5.750926e+08  9.562732e+08  9.604357e+08  1.060061e+09  1.075968e+09\n",
       "2  2.626709e+08  4.921425e+08  4.949845e+08  5.860295e+08  5.863084e+08\n",
       "3  6.960001e+07  9.293736e+07  9.814562e+07  1.250146e+08  1.274217e+08"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = final_model.named_steps[\"kmeans\"].labels_\n",
    "xgb = X.groupby(labels).mean()\n",
    "xgb\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46f490fd",
   "metadata": {
    "papermill": {
     "duration": 0.013292,
     "end_time": "2025-02-02T14:16:46.182059",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.168767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since the features are on different scales, this can lead to biased results.\n",
    "\n",
    "let's Standardize the features before clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7a0b968f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.210773Z",
     "iopub.status.busy": "2025-02-02T14:16:46.210441Z",
     "iopub.status.idle": "2025-02-02T14:16:46.219659Z",
     "shell.execute_reply": "2025-02-02T14:16:46.218635Z"
    },
    "papermill": {
     "duration": 0.025362,
     "end_time": "2025-02-02T14:16:46.221203",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.195841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)\n",
    "\n",
    "labels = final_model.named_steps[\"kmeans\"].labels_\n",
    "xgb = X_scaled_df.groupby(labels).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b60c7a9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.249481Z",
     "iopub.status.busy": "2025-02-02T14:16:46.249122Z",
     "iopub.status.idle": "2025-02-02T14:16:46.300556Z",
     "shell.execute_reply": "2025-02-02T14:16:46.299543Z"
    },
    "papermill": {
     "duration": 0.067501,
     "end_time": "2025-02-02T14:16:46.302277",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.234776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_pca shape: (4016, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.014044e+07</td>\n",
       "      <td>464648.467159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-2.013838e+07</td>\n",
       "      <td>464969.126624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-2.014034e+07</td>\n",
       "      <td>464672.081994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.013734e+07</td>\n",
       "      <td>465137.038218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-2.014051e+07</td>\n",
       "      <td>464415.292496</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            PC1            PC2\n",
       "0 -2.014044e+07  464648.467159\n",
       "1 -2.013838e+07  464969.126624\n",
       "2 -2.014034e+07  464672.081994\n",
       "3 -2.013734e+07  465137.038218\n",
       "4 -2.014051e+07  464415.292496"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca = PCA(n_components=2, random_state =42)\n",
    "\n",
    "# Transform `X`\n",
    "X_t = pca.fit_transform(X)\n",
    "\n",
    "# Put `X_t` into DataFrame\n",
    "X_pca = pd.DataFrame(X_t, columns=[\"PC1\", \"PC2\"])\n",
    "\n",
    "print(\"X_pca shape:\", X_pca.shape)\n",
    "X_pca.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c3ee472",
   "metadata": {
    "papermill": {
     "duration": 0.013539,
     "end_time": "2025-02-02T14:16:46.329992",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.316453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using plotly express to create a side-by-side bar chart from xgb that shows the mean of the features in X for each of the clusters in the final_model. label the x-axis \"Cluster\", the y-axis \"Value [$]\", and use the title \"Small Business Owner Finances by Cluster\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "da6f94bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.358983Z",
     "iopub.status.busy": "2025-02-02T14:16:46.358653Z",
     "iopub.status.idle": "2025-02-02T14:16:46.439831Z",
     "shell.execute_reply": "2025-02-02T14:16:46.438875Z"
    },
    "papermill": {
     "duration": 0.097496,
     "end_time": "2025-02-02T14:16:46.441320",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.343824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"3054a1fc-b6ed-4a72-aa90-cb5e92640d8b\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3054a1fc-b6ed-4a72-aa90-cb5e92640d8b\")) {                    Plotly.newPlot(                        \"3054a1fc-b6ed-4a72-aa90-cb5e92640d8b\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=KGTOTAL\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"KGTOTAL\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"KGTOTAL\",\"offsetgroup\":\"KGTOTAL\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,1,2,3],\"xaxis\":\"x\",\"y\":[-0.1045179666123455,16.96376274723982,7.658495719421496,1.9080097451322209],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=NHNFIN\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"NHNFIN\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"NHNFIN\",\"offsetgroup\":\"NHNFIN\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,1,2,3],\"xaxis\":\"x\",\"y\":[-0.10158409705481798,17.122357335159297,8.738725027133642,1.5278495273429122],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=NFIN\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"NFIN\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"NFIN\",\"offsetgroup\":\"NFIN\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,1,2,3],\"xaxis\":\"x\",\"y\":[-0.10269228707165855,17.064677648876525,8.713654146836507,1.5936586300127038],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=NETWORTH\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"NETWORTH\",\"marker\":{\"color\":\"#ab63fa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"NETWORTH\",\"offsetgroup\":\"NETWORTH\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,1,2,3],\"xaxis\":\"x\",\"y\":[-0.106358013496178,16.460797830082566,9.015774610316601,1.7751915241116252],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=ASSET\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"ASSET\",\"marker\":{\"color\":\"#FFA15A\",\"pattern\":{\"shape\":\"\"}},\"name\":\"ASSET\",\"offsetgroup\":\"ASSET\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[0,1,2,3],\"xaxis\":\"x\",\"y\":[-0.10636414993030179,16.530265644889198,8.919935261616327,1.7878712573708364],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cluster\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Value [$]\"}},\"legend\":{\"title\":{\"text\":\"variable\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Small Business Owner Finances by Cluster\"},\"barmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('3054a1fc-b6ed-4a72-aa90-cb5e92640d8b');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = px.bar(\n",
    "    xgb,\n",
    "    barmode=\"group\",\n",
    "    title=\"Small Business Owner Finances by Cluster\"\n",
    ")\n",
    "\n",
    "fig.update_layout(xaxis_title=\"Cluster\", yaxis_title=\"Value [$]\")\n",
    "\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "021e201e",
   "metadata": {
    "papermill": {
     "duration": 0.013769,
     "end_time": "2025-02-02T14:16:46.469533",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.455764",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Creating a PCA transformer to reduce the dimensionality of the data in X to 2, and then put the transformed data into a DataFrame named X_pca.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "81efc75a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.498596Z",
     "iopub.status.busy": "2025-02-02T14:16:46.498249Z",
     "iopub.status.idle": "2025-02-02T14:16:46.944388Z",
     "shell.execute_reply": "2025-02-02T14:16:46.943127Z"
    },
    "papermill": {
     "duration": 0.462952,
     "end_time": "2025-02-02T14:16:46.946435",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.483483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correct way to access PCA-transformed data\n",
    "plt.figure(figsize=(10, 8))\n",
    "scatter = plt.scatter(X_pca['PC1'], X_pca['PC2'], c=labels, cmap='viridis')\n",
    "plt.title('Customer Segmentation Clustering')\n",
    "plt.xlabel('PC1')\n",
    "plt.ylabel('PC2')\n",
    "plt.colorbar(scatter)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6456e06e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T14:16:46.978391Z",
     "iopub.status.busy": "2025-02-02T14:16:46.977998Z",
     "iopub.status.idle": "2025-02-02T14:16:47.291915Z",
     "shell.execute_reply": "2025-02-02T14:16:47.290809Z"
    },
    "papermill": {
     "duration": 0.331795,
     "end_time": "2025-02-02T14:16:47.293788",
     "exception": false,
     "start_time": "2025-02-02T14:16:46.961993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 8))\n",
    "scatter = plt.scatter(X_pca['PC1'], X_pca['PC2'], c=labels, cmap='viridis')\n",
    "plt.xlim(0, 1.0e6)  \n",
    "plt.ylim(-3, 3e9)\n",
    "plt.xlabel('PC1')\n",
    "plt.ylabel('PC2')\n",
    "plt.title('PCA Results')\n",
    "plt.colorbar\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6433560,
     "sourceId": 10385232,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 28.45438,
   "end_time": "2025-02-02T14:16:48.129967",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-02T14:16:19.675587",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
